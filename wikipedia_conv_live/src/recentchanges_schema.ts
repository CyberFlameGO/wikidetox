/**
* This file was automatically generated by json-schema-to-typescript.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run json-schema-to-typescript to regenerate this file.
*/

/**
 * Represents a MW RecentChange event. https://www.mediawiki.org/wiki/Manual:RCFeed
 *
 */
export interface MediawikiRecentchange {
  meta: {
      /**
     * The queue topic name this message belongs to.
     */
  topic: string;
      /**
     * The URI identifying the jsonschema for this event.  This may be just a short uri containing only the name and revision at the end of the URI path.  e.g. schema_name/12345 is acceptable.  This field is not required.
     *
     */
  schema_uri?: string;
      /**
     * The unique URI identifying the event.
     */
  uri: string;
      /**
     * The unique ID of the request that caused the event.
     */
  request_id?: string;
      /**
     * The unique ID of this event; should match the dt field.
     */
  id: string;
      /**
     * The time stamp of the event, in ISO8601 format.
     */
  dt: string;
      /**
     * The domain the event pertains to.
     */
  domain: string;
    [k: string]: any;
  };
  /**
   * ID of the recentchange event (rcid).
   */
  id?: (number | null);
  /**
   * Type of recentchange event (rc_type). One of "edit", "new", "log", "categorize", or "external". (See Manual:Recentchanges table#rc_type)
   *
   */
  type?: string;
  /**
   * Full page name, from Title::getPrefixedText.
   */
  title?: string;
  /**
   * ID of relevant namespace of affected page (rc_namespace, page_namespace). This is -1 ("Special") for log events.
   *
   */
  namespace?: number;
  /**
   * (rc_comment)
   */
  comment?: string;
  /**
   * The rc_comment parsed into simple HTML. Optional
   */
  parsedcomment?: string;
  /**
   * Unix timestamp (derived from rc_timestamp).
   */
  timestamp?: number;
  /**
   * (rc_user_text)
   */
  user?: string;
  /**
   * (rc_bot)
   */
  bot?: boolean;
  /**
   * $wgCanonicalServer
   */
  server_url?: string;
  /**
   * $wgServerName
   */
  server_name?: string;
  /**
   * $wgScriptPath
   */
  server_script_path?: string;
  /**
   * wfWikiID ($wgDBprefix, $wgDBname)
   */
  wiki?: string;
  /**
   * (rc_minor).
   */
  minor?: boolean;
  /**
   * (rc_patrolled). This property only exists if patrolling is supported for this event (based on $wgUseRCPatrol, $wgUseNPPatrol).
   *
   */
  patrolled?: boolean;
  /**
   * Length of old and new change
   */
  length?: {
      /**
     * (rc_old_len)
     */
  old?: (number | null);
      /**
     * (rc_new_len)
     */
  new?: (number | null);
    [k: string]: any;
  };
  /**
   * Old and new revision IDs
   */
  revision?: {
      /**
     * (rc_last_oldid)
     */
  new?: (number | null);
      /**
     * (rc_this_oldid)
     */
  old?: (number | null);
    [k: string]: any;
  };
  /**
   * (rc_log_id)
   */
  log_id?: (number | null);
  /**
   * (rc_log_type)
   */
  log_type?: (string | null);
  /**
   * (rc_log_action)
   */
  log_action?: string;
  /**
   * Property only exists if event has rc_params.
   */
  log_params?: (any[] | {
    [k: string]: any;
  } | string);
  log_action_comment?: (string | null);
  [k: string]: any;
}
